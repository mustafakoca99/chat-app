@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable


<PageTitle>Index</PageTitle>

<form>
  <div class="form-group">
    <label for="exampleInputisim">isim</label>
    <input @bind="userInput" class="form-control" id="exampleInputisim" aria-describedby="isimhelp" placeholder="isim giriniz">
    <small id="isimhelp" class="form-text text-muted">isim yazmanız gerekmekte</small>
  </div>
  <div class="form-group">
    <label for="exampleInputmessage">mesaj</label>
    <input @bind="messageInput" class="form-control" id="exampleInputmessage" placeholder="mesajınızı yazınız">
  </div>

</form><br />

<button @onclick="Send" disabled="@(!IsConnected)" id="btn" class="btn btn-primary btn-sm">Gönder</button>
<hr>


<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}